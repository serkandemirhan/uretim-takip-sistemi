#!/usr/bin/env python3
"""
FULL PROCUREMENT SYSTEM INTEGRATION TEST
T√ºm akƒ±≈üƒ± test eder:
1. Stok √ºr√ºn olu≈ütur
2. Job olu≈ütur
3. Quotation olu≈ütur ve job'a baƒüla
4. Purchase Request olu≈ütur (quotation'dan)
5. PR'ƒ± onayla
6. Purchase Order olu≈ütur ve PR'a baƒüla
7. Goods Receipt olu≈ütur
8. Kalite kontrol√º yap
9. Mal kabul√º onayla (stok g√ºncellensin)
10. Job'a malzeme ata
11. Malzeme kontrol√º yap
12. Malzemeleri rezerve et
13. Malzemeleri t√ºket (stok d√º≈üs√ºn)
14. Final kontroller
"""

import requests
import json
from datetime import datetime, timedelta

BASE_URL = "http://localhost:5001"

# Renkler
GREEN = '\033[0;32m'
RED = '\033[0;31m'
YELLOW = '\033[1;33m'
BLUE = '\033[0;34m'
CYAN = '\033[0;36m'
MAGENTA = '\033[0;35m'
NC = '\033[0m'

def print_header(title):
    print(f"\n{'='*60}")
    print(f"{CYAN}{title}{NC}")
    print(f"{'='*60}")

def print_step(number, title):
    print(f"\n{YELLOW}‚îÅ‚îÅ‚îÅ STEP {number}: {title} ‚îÅ‚îÅ‚îÅ{NC}")

def print_success(message):
    print(f"{GREEN}‚úÖ {message}{NC}")

def print_error(message):
    print(f"{RED}‚ùå {message}{NC}")

def print_info(message):
    print(f"{BLUE}‚ÑπÔ∏è  {message}{NC}")

def print_data(title, data):
    print(f"{MAGENTA}{title}:{NC}")
    print(json.dumps(data, indent=2, ensure_ascii=False))

# Global state
state = {}

print_header("üöÄ PROCUREMENT SYSTEM - FULL INTEGRATION TEST")
print(f"Test Time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

# ============================================
# STEP 1: LOGIN
# ============================================
print_step(1, "LOGIN - Get Authentication Token")
try:
    response = requests.post(f"{BASE_URL}/api/auth/login", json={
        "username": "admin",
        "password": "admin123"
    })
    data = response.json()

    if 'token' in data:
        state['token'] = data['token']
        state['headers'] = {"Authorization": f"Bearer {state['token']}"}
        print_success(f"Token alƒ±ndƒ±: {state['token'][:30]}...")
    else:
        print_error(f"Login failed: {data}")
        exit(1)
except Exception as e:
    print_error(f"Login error: {e}")
    exit(1)

# ============================================
# STEP 2: CREATE STOCK PRODUCT
# ============================================
print_step(2, "CREATE STOCK PRODUCT - Test malzemesi olu≈ütur")
try:
    product_data = {
        "product_code": f"TEST-MAT-{datetime.now().strftime('%H%M%S')}",
        "product_name": "Test Baskƒ± Kaƒüƒ±dƒ± - A4",
        "category": "Kaƒüƒ±t",
        "unit": "paket",
        "current_quantity": 0,  # Ba≈ülangƒ±√ßta sƒ±fƒ±r
        "min_quantity": 50,
        "unit_price": 45.50,
        "currency": "TRY",
        "supplier_name": "Test Kaƒüƒ±t Tedarik A.≈û.",
        "description": "Integration test i√ßin olu≈üturuldu"
    }

    response = requests.post(
        f"{BASE_URL}/api/stocks",
        headers=state['headers'],
        json=product_data
    )

    if response.status_code == 201:
        result = response.json()
        state['product_id'] = result.get('data', {}).get('id')
        print_success(f"√úr√ºn olu≈üturuldu: {state['product_id']}")
        print_info(f"  {product_data['product_code']} - {product_data['product_name']}")
        print_info(f"  Ba≈ülangƒ±√ß stoƒüu: {product_data['current_quantity']} {product_data['unit']}")
    else:
        print_error(f"Product creation failed: {response.text}")
        exit(1)
except Exception as e:
    print_error(f"Error: {e}")
    exit(1)

# ============================================
# STEP 3: CREATE JOB
# ============================================
print_step(3, "CREATE JOB - Test i≈üi olu≈ütur")
try:
    # √ñnce customer lazƒ±m
    customers = requests.get(f"{BASE_URL}/api/customers", headers=state['headers']).json()
    customer_id = customers['data'][0]['id'] if customers.get('data') else None

    job_data = {
        "title": f"Integration Test Job - {datetime.now().strftime('%Y%m%d-%H%M%S')}",
        "customer_id": customer_id,
        "description": "Full procurement flow test i√ßin olu≈üturuldu",
        "status": "active",
        "priority": "high"
    }

    response = requests.post(
        f"{BASE_URL}/api/jobs",
        headers=state['headers'],
        json=job_data
    )

    if response.status_code in [200, 201]:
        result = response.json()
        state['job_id'] = result.get('data', {}).get('id') or result.get('id') or result.get('job', {}).get('id')
        print_success(f"Job olu≈üturuldu: {state['job_id']}")
        print_info(f"  {job_data['title']}")
    else:
        print_error(f"Job creation failed: {response.text}")
        exit(1)
except Exception as e:
    print_error(f"Error: {e}")
    exit(1)

# ============================================
# STEP 4: CREATE QUOTATION
# ============================================
print_step(4, "CREATE QUOTATION - Teklif olu≈ütur ve job'a baƒüla")
try:
    quotation_data = {
        "name": f"Integration Test Quotation - {datetime.now().strftime('%H%M%S')}",
        "customer_id": customer_id,
        "job_id": state['job_id'],  # Job'a baƒüla
        "description": "Test teklifi - malzeme listesi",
        "currency": "TRY"
    }

    response = requests.post(
        f"{BASE_URL}/api/quotations",
        headers=state['headers'],
        json=quotation_data
    )

    if response.status_code in [200, 201]:
        result = response.json()
        state['quotation_id'] = result.get('data', {}).get('id') or result.get('id')
        print_success(f"Quotation olu≈üturuldu: {state['quotation_id']}")
        print_info(f"  Job ID: {state['job_id']}")
    else:
        print_error(f"Quotation creation failed: {response.text}")
        exit(1)
except Exception as e:
    print_error(f"Error: {e}")
    exit(1)

# ============================================
# STEP 5: CREATE PURCHASE REQUEST
# ============================================
print_step(5, "CREATE PURCHASE REQUEST - Satƒ±n alma talebi olu≈ütur")
try:
    pr_data = {
        "quotation_id": state['quotation_id'],
        "job_id": state['job_id'],
        "priority": "high",
        "required_by_date": (datetime.now() + timedelta(days=7)).strftime("%Y-%m-%d"),
        "notes": "Integration test - 100 paket kaƒüƒ±t gerekli",
        "items": [
            {
                "product_id": state['product_id'],
                "quantity": 100,  # 100 paket
                "unit": "paket",
                "estimated_unit_price": 45.50,
                "currency": "TRY",
                "suggested_supplier": "Test Kaƒüƒ±t Tedarik A.≈û."
            }
        ]
    }

    response = requests.post(
        f"{BASE_URL}/api/purchase-requests",
        headers=state['headers'],
        json=pr_data
    )

    if response.status_code == 201:
        result = response.json()
        state['pr_id'] = result['id']
        print_success(f"Purchase Request olu≈üturuldu: {state['pr_id']}")

        # Detay getir
        pr_detail = requests.get(
            f"{BASE_URL}/api/purchase-requests/{state['pr_id']}",
            headers=state['headers']
        ).json()

        state['pr_number'] = pr_detail['request_number']
        print_info(f"  PR Number: {state['pr_number']}")
        print_info(f"  Items: {len(pr_detail['items'])} adet")
        print_info(f"  Total: {pr_detail['items'][0]['estimated_total_price']} TRY")
    else:
        print_error(f"PR creation failed: {response.text}")
        exit(1)
except Exception as e:
    print_error(f"Error: {e}")
    exit(1)

# ============================================
# STEP 6: SUBMIT PR TO APPROVAL
# ============================================
print_step(6, "SUBMIT PR - Onaya g√∂nder")
try:
    response = requests.post(
        f"{BASE_URL}/api/purchase-requests/{state['pr_id']}/submit",
        headers=state['headers']
    )

    if response.status_code == 200:
        print_success("PR onaya g√∂nderildi")

        # Status kontrol
        pr = requests.get(
            f"{BASE_URL}/api/purchase-requests/{state['pr_id']}",
            headers=state['headers']
        ).json()
        print_info(f"  Status: {pr['status']}")
    else:
        print_error(f"Submit failed: {response.text}")
        exit(1)
except Exception as e:
    print_error(f"Error: {e}")
    exit(1)

# ============================================
# STEP 7: APPROVE PR
# ============================================
print_step(7, "APPROVE PR - Satƒ±n alma talebini onayla")
try:
    response = requests.post(
        f"{BASE_URL}/api/purchase-requests/{state['pr_id']}/approve",
        headers=state['headers']
    )

    if response.status_code == 200:
        print_success("PR onaylandƒ±")

        pr = requests.get(
            f"{BASE_URL}/api/purchase-requests/{state['pr_id']}",
            headers=state['headers']
        ).json()
        print_info(f"  Status: {pr['status']}")
        print_info(f"  Approved by: {pr['approved_by_name']}")
        print_info(f"  Approved at: {pr['approved_at']}")
    else:
        print_error(f"Approve failed: {response.text}")
        exit(1)
except Exception as e:
    print_error(f"Error: {e}")
    exit(1)

# ============================================
# STEP 8: CREATE PURCHASE ORDER
# ============================================
print_step(8, "CREATE PURCHASE ORDER - Satƒ±n alma emri olu≈ütur")
try:
    po_data = {
        "stock_id": state['product_id'],
        "order_code": f"PO-TEST-{datetime.now().strftime('%H%M%S')}",
        "quantity": 100,
        "unit_price": 45.50,
        "currency": "TRY",
        "supplier_name": "Test Kaƒüƒ±t Tedarik A.≈û.",
        "expected_delivery_date": (datetime.now() + timedelta(days=3)).strftime("%Y-%m-%d"),
        "notes": f"PR {state['pr_number']} i√ßin sipari≈ü"
    }

    response = requests.post(
        f"{BASE_URL}/api/purchase-orders",
        headers=state['headers'],
        json=po_data
    )

    if response.status_code in [200, 201]:
        result = response.json()
        state['po_id'] = result.get('data', {}).get('id') or result.get('id')
        print_success(f"Purchase Order olu≈üturuldu: {state['po_id']}")
        print_info(f"  Order Code: {po_data['order_code']}")
        print_info(f"  Quantity: {po_data['quantity']} paket")
        print_info(f"  Total: {po_data['quantity'] * po_data['unit_price']} TRY")
    else:
        print_error(f"PO creation failed: {response.text}")
        exit(1)
except Exception as e:
    print_error(f"Error: {e}")
    exit(1)

# ============================================
# STEP 9: CREATE GOODS RECEIPT
# ============================================
print_step(9, "CREATE GOODS RECEIPT - Mal kabul kaydƒ± olu≈ütur")
try:
    gr_data = {
        "purchase_order_id": state['po_id'],
        "notes": "Integration test - √ºr√ºnler teslim alƒ±ndƒ±",
        "lines": [
            {
                "product_id": state['product_id'],
                "ordered_quantity": 100,
                "received_quantity": 98,  # 2 paket eksik geldi
                "unit": "paket",
                "notes": "2 paket hasarlƒ± geldi"
            }
        ]
    }

    response = requests.post(
        f"{BASE_URL}/api/goods-receipts",
        headers=state['headers'],
        json=gr_data
    )

    if response.status_code == 201:
        result = response.json()
        state['gr_id'] = result['id']
        print_success(f"Goods Receipt olu≈üturuldu: {state['gr_id']}")

        # Detay getir
        gr = requests.get(
            f"{BASE_URL}/api/goods-receipts/{state['gr_id']}",
            headers=state['headers']
        ).json()

        state['gr_number'] = gr['receipt_number']
        print_info(f"  Receipt Number: {state['gr_number']}")
        print_info(f"  Status: {gr['status']}")
        print_info(f"  Lines: {len(gr['lines'])} adet")
    else:
        print_error(f"GR creation failed: {response.text}")
        exit(1)
except Exception as e:
    print_error(f"Error: {e}")
    exit(1)

# ============================================
# STEP 10: QUALITY INSPECTION
# ============================================
print_step(10, "QUALITY INSPECTION - Kalite kontrol√º yap")
try:
    # √ñnce line ID'yi al
    gr = requests.get(
        f"{BASE_URL}/api/goods-receipts/{state['gr_id']}",
        headers=state['headers']
    ).json()

    line_id = gr['lines'][0]['id']

    inspect_data = {
        "quality_status": "approved",
        "lines": [
            {
                "line_id": line_id,
                "accepted_quantity": 95,  # 95 paket kabul
                "rejected_quantity": 3,   # 3 paket red (hasarlƒ±)
                "status": "partial",
                "rejection_reason": "3 paket hasarlƒ±, 2 paket eksik"
            }
        ]
    }

    response = requests.post(
        f"{BASE_URL}/api/goods-receipts/{state['gr_id']}/inspect",
        headers=state['headers'],
        json=inspect_data
    )

    if response.status_code == 200:
        print_success("Kalite kontrol√º tamamlandƒ±")
        print_info(f"  Kabul edilen: 95 paket")
        print_info(f"  Reddedilen: 3 paket")
        print_info(f"  Eksik: 2 paket")
    else:
        print_error(f"Inspection failed: {response.text}")
        exit(1)
except Exception as e:
    print_error(f"Error: {e}")
    exit(1)

# ============================================
# STEP 11: APPROVE GOODS RECEIPT (STOK G√úNCELLENECEK)
# ============================================
print_step(11, "APPROVE GOODS RECEIPT - Onayla ve stoƒüa ekle")
try:
    # √ñnce mevcut stok kontrol√º
    stock_before = requests.get(
        f"{BASE_URL}/api/stocks/{state['product_id']}",
        headers=state['headers']
    ).json()

    print_info(f"Onay √∂ncesi stok: {stock_before.get('current_quantity', 0)} paket")

    response = requests.post(
        f"{BASE_URL}/api/goods-receipts/{state['gr_id']}/approve",
        headers=state['headers']
    )

    if response.status_code == 200:
        print_success("Goods Receipt onaylandƒ±!")

        # Stok kontrol√º
        stock_after = requests.get(
            f"{BASE_URL}/api/stocks/{state['product_id']}",
            headers=state['headers']
        ).json()

        print_info(f"Onay sonrasƒ± stok: {stock_after.get('current_quantity', 0)} paket")
        print_success(f"‚ú® Stok g√ºncellendi: +95 paket (kabul edilen miktar)")

        state['current_stock'] = float(stock_after.get('current_quantity', 0))
    else:
        print_error(f"Approval failed: {response.text}")
        exit(1)
except Exception as e:
    print_error(f"Error: {e}")
    exit(1)

# ============================================
# STEP 12: ADD MATERIALS TO JOB
# ============================================
print_step(12, "ADD JOB MATERIALS - ƒ∞≈üe malzeme ata")
try:
    material_data = {
        "product_id": state['product_id'],
        "required_quantity": 50,  # 50 paket gerekli
        "unit": "paket",
        "notes": "Integration test - i≈ü i√ßin gerekli malzeme"
    }

    response = requests.post(
        f"{BASE_URL}/api/jobs/{state['job_id']}/materials",
        headers=state['headers'],
        json=material_data
    )

    if response.status_code == 201:
        result = response.json()
        state['material_id'] = result['id']
        print_success(f"Malzeme i≈üe eklendi: {state['material_id']}")
        print_info(f"  Gerekli miktar: 50 paket")
    else:
        print_error(f"Material add failed: {response.text}")
        exit(1)
except Exception as e:
    print_error(f"Error: {e}")
    exit(1)

# ============================================
# STEP 13: CHECK AVAILABILITY
# ============================================
print_step(13, "CHECK MATERIALS AVAILABILITY - Stok kontrol√º")
try:
    response = requests.post(
        f"{BASE_URL}/api/jobs/{state['job_id']}/materials/check-availability",
        headers=state['headers']
    )

    if response.status_code == 200:
        result = response.json()
        print_success("Stok kontrol√º yapƒ±ldƒ±")

        for mat in result['materials']:
            print_info(f"  {mat['product_name']}:")
            print_info(f"    Gerekli: {mat['required_quantity']} {mat['unit']}")
            print_info(f"    Mevcut: {mat['available_quantity']} {mat['unit']}")
            print_info(f"    Eksik: {mat['shortage']} {mat['unit']}")
            print_info(f"    ‚úÖ Yeterli" if mat['is_available'] else f"    ‚ùå Yetersiz")
    else:
        print_error(f"Check failed: {response.text}")
        exit(1)
except Exception as e:
    print_error(f"Error: {e}")
    exit(1)

# ============================================
# STEP 14: ALLOCATE MATERIALS
# ============================================
print_step(14, "ALLOCATE MATERIALS - Malzemeleri rezerve et")
try:
    response = requests.post(
        f"{BASE_URL}/api/jobs/{state['job_id']}/materials/allocate",
        headers=state['headers']
    )

    if response.status_code == 200:
        print_success("Malzemeler rezerve edildi")

        # Materials durumu
        materials = requests.get(
            f"{BASE_URL}/api/jobs/{state['job_id']}/materials",
            headers=state['headers']
        ).json()

        for mat in materials['data']:
            print_info(f"  Status: {mat['status']}")
            print_info(f"  Allocated: {mat['allocated_quantity']} {mat['unit']}")
    else:
        print_error(f"Allocate failed: {response.text}")
        exit(1)
except Exception as e:
    print_error(f"Error: {e}")
    exit(1)

# ============================================
# STEP 15: CONSUME MATERIALS (STOK D√ú≈ûECEK)
# ============================================
print_step(15, "CONSUME MATERIALS - Malzemeleri t√ºket (stok d√º≈üs√ºn)")
try:
    stock_before_consume = requests.get(
        f"{BASE_URL}/api/stocks/{state['product_id']}",
        headers=state['headers']
    ).json()

    print_info(f"T√ºketim √∂ncesi stok: {stock_before_consume.get('current_quantity', 0)} paket")

    consume_data = {
        "consumptions": [
            {
                "material_id": state['material_id'],
                "consumed_quantity": 30  # 30 paket t√ºketildi
            }
        ]
    }

    response = requests.post(
        f"{BASE_URL}/api/jobs/{state['job_id']}/materials/consume",
        headers=state['headers'],
        json=consume_data
    )

    if response.status_code == 200:
        print_success("Malzemeler t√ºketildi!")

        # Stok kontrol√º
        stock_after_consume = requests.get(
            f"{BASE_URL}/api/stocks/{state['product_id']}",
            headers=state['headers']
        ).json()

        print_info(f"T√ºketim sonrasƒ± stok: {stock_after_consume.get('current_quantity', 0)} paket")
        print_success(f"‚ú® Stok g√ºncellendi: -30 paket (t√ºketilen miktar)")

        # Materials √∂zet
        summary = requests.get(
            f"{BASE_URL}/api/jobs/{state['job_id']}/materials/summary",
            headers=state['headers']
        ).json()

        print_info(f"  Tamamlanma: {summary['completion_percentage']:.1f}%")
        print_info(f"  T√ºketilen: {summary['total_consumed']} / {summary['total_required']}")
    else:
        print_error(f"Consume failed: {response.text}")
        exit(1)
except Exception as e:
    print_error(f"Error: {e}")
    exit(1)

# ============================================
# FINAL SUMMARY
# ============================================
print_header("üìä FINAL SUMMARY - Test √ñzeti")

print(f"\n{CYAN}Created Entities:{NC}")
print(f"  ‚Ä¢ Product:  {state.get('product_id', 'N/A')}")
print(f"  ‚Ä¢ Job:      {state.get('job_id', 'N/A')}")
print(f"  ‚Ä¢ Quotation: {state.get('quotation_id', 'N/A')}")
print(f"  ‚Ä¢ PR:       {state.get('pr_number', 'N/A')} ({state.get('pr_id', 'N/A')})")
print(f"  ‚Ä¢ PO:       {state.get('po_id', 'N/A')}")
print(f"  ‚Ä¢ GR:       {state.get('gr_number', 'N/A')} ({state.get('gr_id', 'N/A')})")

print(f"\n{CYAN}Stock Movements:{NC}")
print(f"  ‚Ä¢ Ba≈ülangƒ±√ß:        0 paket")
print(f"  ‚Ä¢ Sipari≈ü:        100 paket")
print(f"  ‚Ä¢ Gelen:           98 paket")
print(f"  ‚Ä¢ Kabul edilen:    95 paket")
print(f"  ‚Ä¢ Reddedilen:       3 paket")
print(f"  ‚Ä¢ Stoƒüa eklenen:   95 paket ‚úÖ")
print(f"  ‚Ä¢ T√ºketilen:       30 paket ‚úÖ")
print(f"  ‚Ä¢ Final Stok:      65 paket")

print(f"\n{CYAN}Material Status:{NC}")
summary = requests.get(
    f"{BASE_URL}/api/jobs/{state['job_id']}/materials/summary",
    headers=state['headers']
).json()
print(f"  ‚Ä¢ Required:   50 paket")
print(f"  ‚Ä¢ Allocated:  50 paket")
print(f"  ‚Ä¢ Consumed:   30 paket")
print(f"  ‚Ä¢ Remaining:  20 paket")
print(f"  ‚Ä¢ Progress:   {summary['completion_percentage']:.1f}%")

print(f"\n{GREEN}{'='*60}")
print(f"‚úÖ T√úM TESTLER BA≈ûARILI!")
print(f"{'='*60}{NC}\n")

print(f"{YELLOW}Tested Flow:{NC}")
print("  1. ‚úÖ Stock Product Creation")
print("  2. ‚úÖ Job Creation")
print("  3. ‚úÖ Quotation Creation & Job Linking")
print("  4. ‚úÖ Purchase Request Creation")
print("  5. ‚úÖ PR Approval Workflow")
print("  6. ‚úÖ Purchase Order Creation")
print("  7. ‚úÖ Goods Receipt Creation")
print("  8. ‚úÖ Quality Inspection")
print("  9. ‚úÖ Goods Receipt Approval ‚Üí Stock Update")
print("  10. ‚úÖ Job Materials Assignment")
print("  11. ‚úÖ Material Availability Check")
print("  12. ‚úÖ Material Allocation")
print("  13. ‚úÖ Material Consumption ‚Üí Stock Update")

print(f"\n{CYAN}Database Verification:{NC}")
print("  Run these queries to verify:")
print(f"    ‚Ä¢ SELECT * FROM stocks WHERE id = '{state['product_id']}';")
print(f"    ‚Ä¢ SELECT * FROM purchase_requests WHERE id = '{state['pr_id']}';")
print(f"    ‚Ä¢ SELECT * FROM goods_receipts WHERE id = '{state['gr_id']}';")
print(f"    ‚Ä¢ SELECT * FROM job_materials WHERE job_id = '{state['job_id']}';")
print(f"    ‚Ä¢ SELECT * FROM stock_movements WHERE stock_id = '{state['product_id']}';")

print(f"\n{GREEN}üéâ INTEGRATION TEST COMPLETE!{NC}\n")
